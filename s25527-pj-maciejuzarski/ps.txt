Używając komendy Set-ExecutionPolicy Bypass, umożliwiłem uruchamianie swoich skryptów
PS C:\Windows\system32> Set-ExecutionPolicy Bypass
Execution Policy Change
The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose
you to the security risks described in the about_Execution_Policies help topic at
https:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is "N"): y
PS C:\Windows\system32>
Używając polecenia Get-Module -ListAvailable | ? {$_.Version -ge "2.0.0.0"} wyświetliłem listę modułów, których wersja jest nowsza lub równa 2.0.0.0; wyświetliłem listę 24 modułów
Używając polecenia Get-Module -ListAvailable | ? {$_.Version -ge "2.0.0.0"} | % {Get-Command -Module $_.Name} wyświetliłem Komandlety w wersji 2.0.0.0 I wyższej, było ich dosyć sporo, m.in. moduły powershella, vpn’a czy TLS; dodając kolejne polecenia po pipilinie | ograniczyłem listowanie do plików mających w nazwie „Add-„ lub „Get-„; 
Szczególnie ciekawe było dodanie polecenia Out-GridView, które listowane wyniki wyświetliło w nowym oknie PowerShella w „wersji graficznej”

Nastepnie użyłem komendy Import-Module BitsTransfer, żeby załadować moduł do przesyłania danych w tle;
Wylistowałem wszystkie komendy w tym module, otrzymując wynik
CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-BitsFile                                       2.0.0.0    BitsTransfer
Cmdlet          Complete-BitsTransfer                              2.0.0.0    BitsTransfer
Cmdlet          Get-BitsTransfer                                   2.0.0.0    BitsTransfer
Cmdlet          Remove-BitsTransfer                                2.0.0.0    BitsTransfer
Cmdlet          Resume-BitsTransfer                                2.0.0.0    BitsTransfer
Cmdlet          Set-BitsTransfer                                   2.0.0.0    BitsTransfer
Cmdlet          Start-BitsTransfer                                 2.0.0.0    BitsTransfer
Cmdlet          Suspend-BitsTransfer                               2.0.0.0    BitsTransfer

Następnie użyłem polecenia Start-BitsTransfer, aby pobrać maszynę wirtualną Javy; trwało to trochę długo i zrobiłem się niecierpliwy, więc anulowałem proces poleceniem 
Get-BitsTransfer  | Remove-BitsTransfer                            
Następnie
PS C:\Users\macuz> Measure-Command {Get-ChildItem -Path C:\Windows}

Days              : 0
Hours             : 0
Minutes           : 0
Seconds           : 0
Milliseconds      : 3
Ticks             : 36924
TotalDays         : 4,27361111111111E-08
TotalHours        : 1,02566666666667E-06
TotalMinutes      : 6,154E-05
TotalSeconds      : 0,0036924
TotalMilliseconds : 3,6924

PS C:\Users\macuz> Get-Alias | ? {$_.Definition -like "Get-ChildItem"}

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           dir -> Get-ChildItem
Alias           gci -> Get-ChildItem
Alias           ls -> Get-ChildItem

Poleceniem
PS C:\Users\macuz> & C:\Windows\notepad.exe
Odpaliłem notatnik; ciekawa rzecz bo notatnik odpalony z komendy ma inną ikonę niż notatnik odpalony poza powershellem;

Poleceniem Get-PSDrive
Wylistowałem dyski w powershellu, podglądając przy okazji ile zostało mi miejsca na poszczególnych dyskach – mniej niż bym chciał;
Po werjściu do cd .\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
Zdałem sobie sprawę, że czas poodinstalowywać niektóre stare programy, zwłaszcza do obróbki video, bo ostatni raz używałem je na początku 2021;

PS C:\Users\macuz> Get-WMIObject -Class Win32_Product | Select-Object Name, Vendor | Format-Table -AutoSize

Name                                                           Vendor
----                                                           ------
Office 16 Click-to-Run Extensibility Component                 Microsoft Corporation
Office 16 Click-to-Run Localization Component                  Microsoft Corporation
Office 16 Click-to-Run Licensing Component                     Microsoft Corporation
Microsoft Visual C++ 2019 X86 Additional Runtime - 14.28.29914 Microsoft Corporation
LibreOffice 6.4.7.2                                            The Document Foundation
Microsoft Visual C++ 2010  x64 Redistributable - 10.0.40219    Microsoft Corporation
Microsoft Visual C++ 2010  x86 Redistributable - 10.0.40219    Microsoft Corporation
Microsoft Visual C++ 2013 x86 Minimum Runtime - 12.0.21005     Microsoft Corporation
Microsoft Visual C++ 2013 x86 Additional Runtime - 12.0.21005  Microsoft Corporation
ENE_DRAM_RGB_AIO                                               Ene Tech.
WD_BLACK AN1500                                                ENE TECHNOLOGY INC.
Sprawdzanie kondycji komputera z systemem Windows              Microsoft Corporation
Microsoft Visual C++ 2013 x64 Additional Runtime - 12.0.21005  Microsoft Corporation
WD_BLACK D50                                                   ENE TECHNOLOGY INC.
Microsoft Visual C++ 2013 x64 Minimum Runtime - 12.0.21005     Microsoft Corporation
AMD Settings                                                   Advanced Micro Devices, Inc.
Microsoft Visual C++ 2012 x64 Additional Runtime - 11.0.61030  Microsoft Corporation
AMD Ryzen Master SDK                                           Advanced Micro Devices, Inc.
Microsoft Update Health Tools                                  Microsoft Corporation
Avast Update Helper                                            AVAST Software

Microsoft Visual C++ 2019 X86 Minimum Runtime - 14.28.29914    Microsoft Corporation
ENE_MousePad_HAL                                               ENE TECHNOLOGY INC.
Branding64                                                     Advanced Micro Devices, Inc.
Teams Machine-Wide Installer                                   Microsoft Corporation
Oracle VM VirtualBox 6.1.26                                    Oracle Corporation
Microsoft Visual C++ 2019 X64 Minimum Runtime - 14.28.29334    Microsoft Corporation
Microsoft Visual C++ 2012 x86 Additional Runtime - 11.0.61030  Microsoft Corporation
Microsoft Visual C++ 2012 x64 Minimum Runtime - 11.0.61030     Microsoft Corporation
Brackets                                                       brackets.io
Microsoft Visual C++ 2012 x86 Minimum Runtime - 11.0.61030     Microsoft Corporation
ENE IO Driver                                                  ENE TECHNOLOGY INC.
Microsoft Visual C++ 2019 X64 Additional Runtime - 14.28.29334 Microsoft Corporation
ENE_X-JMI_HAL                                                  ENE Tech
ENE_EHD_M2_HAL                                                 ENE TECHNOLOGY INC.

PS C:\Users\macuz> [void] [System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
>>
>> $icoPath = Get-Process -id $pid | Select-Object -ExpandProperty Path
>>
>> $myNotification = New-Object System.Windows.Forms.NotifyIcon
>> $myNotification.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($icoPath)
>> $myNotification.BalloonTipIcon = 'Error'
>> $myNotification.BalloonTipText = "Your cat has meowed!"
>> $myNotification.BalloonTipTitle = "Cat Error"
>> $myNotification.Visible = $True
>> $myNotification.ShowBalloonTip(10000)

Po wpisaniu powyższej mój windows zamiauczał errorem :D


